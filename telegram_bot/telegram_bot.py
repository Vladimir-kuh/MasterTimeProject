import os
import requests
import datetime
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
import telegram
from telegram.ext import (
    Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
)
from dotenv import load_dotenv
from datetime import date, timedelta
import calendar
import re  # –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

# --- 0. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_BASE_URL = os.getenv("API_BASE_URL")
BOT_USERNAME = os.getenv("BOT_USERNAME")
BOT_PASSWORD = os.getenv("BOT_PASSWORD")
TOKEN_OBTAIN_URL = os.getenv("TOKEN_OBTAIN_URL")
TOKEN_REFRESH_URL = os.getenv("TOKEN_REFRESH_URL")

if not TELEGRAM_BOT_TOKEN or not API_BASE_URL:
    logger.critical("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_BOT_TOKEN –∏ API_BASE_URL –≤ .env")
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_BOT_TOKEN –∏ API_BASE_URL –≤ .env")

# URL-–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SERVICES_URL = f"{API_BASE_URL}services/"
EMPLOYEES_URL = f"{API_BASE_URL}employees/"  # <-- –ù–û–í–ê–Ø –ö–û–ù–°–¢–ê–ù–¢–ê
SLOTS_URL = f"{API_BASE_URL}appointments/available_slots/"
APPOINTMENTS_URL = f"{API_BASE_URL}appointments/"

ORGANIZATION_ID = 1

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ ---
GLOBAL_TOKENS = {
    'access': None,
    'refresh': None
}


# --- 2. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –∏ API ---

def obtain_initial_tokens() -> bool:
    """–ü–æ–ª—É—á–∞–µ—Ç Access –∏ Refresh —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    global GLOBAL_TOKENS

    if not all([BOT_USERNAME, BOT_PASSWORD, TOKEN_OBTAIN_URL]):
        logger.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç BOT_USERNAME, BOT_PASSWORD –∏–ª–∏ TOKEN_OBTAIN_URL.")
        return False

    logger.info("‚è≥ –ü–æ–ª—É—á–∞—é –Ω–∞—á–∞–ª—å–Ω—ã–µ Access –∏ Refresh —Ç–æ–∫–µ–Ω—ã...")
    payload = {"username": BOT_USERNAME, "password": BOT_PASSWORD}
    try:
        response = requests.post(TOKEN_OBTAIN_URL, json=payload)
        response.raise_for_status()
        tokens = response.json()
        GLOBAL_TOKENS['access'] = tokens.get('access')
        GLOBAL_TOKENS['refresh'] = tokens.get('refresh')
        logger.info("‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã.")
        return True
    except requests.exceptions.RequestException as e:
        logger.fatal(f"–§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –¢–û–ö–ï–ù–ê: {e}")
        return False


def refresh_access_token() -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç Access Token, –∏—Å–ø–æ–ª—å–∑—É—è Refresh Token."""
    global GLOBAL_TOKENS
    if not GLOBAL_TOKENS['refresh']:
        logger.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Refresh Token.")
        return False
    logger.info("‚è≥ –ü—ã—Ç–∞—é—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Access Token...")
    try:
        response = requests.post(TOKEN_REFRESH_URL, json={'refresh': GLOBAL_TOKENS['refresh']})
        response.raise_for_status()
        new_tokens = response.json()
        GLOBAL_TOKENS['access'] = new_tokens.get('access')
        if 'refresh' in new_tokens:
            GLOBAL_TOKENS['refresh'] = new_tokens['refresh']
        logger.info("‚úÖ Access Token —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
        return True
    except requests.exceptions.RequestException as e:
        logger.fatal(f"–§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –¢–û–ö–ï–ù–ê: {e}")
        return False


def make_api_request(method: str, url: str, **kwargs) -> requests.Response | None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ª–æ–≥–∏–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞."""
    global GLOBAL_TOKENS
    logger.debug(f"API –ó–∞–ø—Ä–æ—Å: {method} {url}, –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {kwargs.get('params', '–ù–µ—Ç')}")

    def execute_request(current_access_token: str):
        headers = kwargs.pop('headers', {})
        if current_access_token:
            headers['Authorization'] = f"Bearer {current_access_token}"
        return requests.request(method, url, headers=headers, **kwargs)

    current_access = GLOBAL_TOKENS['access']
    if not current_access:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not obtain_initial_tokens() and not refresh_access_token():
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Access Token –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å.")
            return None
        current_access = GLOBAL_TOKENS['access']

    response = execute_request(current_access)

    if response.status_code == 401:
        logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω 401 Unauthorized. –ü—ã—Ç–∞—é—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω...")
        if refresh_access_token():
            logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä—è—é –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º Access Token...")
            response = execute_request(GLOBAL_TOKENS['access'])
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
            return None

    logger.debug(f"API –û—Ç–≤–µ—Ç: –°—Ç–∞—Ç—É—Å {response.status_code}")
    return response


# --- 3. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (start, services, my_appointments) ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É", callback_data='start_booking')],
        [InlineKeyboardButton("üóìÔ∏è –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data='view_appointments')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=reply_markup
    )


async def services_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥."""
    user_id = update.effective_user.id

    message = "–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥..."
    if update.callback_query:
        await update.callback_query.edit_message_text(text=message)
    else:
        await update.message.reply_text(text=message)

    params = {'organization_id': ORGANIZATION_ID}
    response = make_api_request('GET', SERVICES_URL, params=params)

    if response is None or not response.ok:
        logger.error(
            f"User {user_id}: API request for services failed (Status {response.status_code if response else 'None'}).")
        error_message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if update.callback_query:
            await update.callback_query.edit_message_text(error_message)
        else:
            await update.message.reply_text(error_message)
        return

    services = response.json()

    if not services:
        await update.callback_query.edit_message_text("üòî –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥.")
        return

    keyboard = []
    message_text = "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –∑–∞–ø–∏—Å–∏:"

    for service in services:
        service_id = service.get('id')
        name = service.get('name')
        price = service.get('price')
        if service_id and name:
            label = f"{name} ({price} ‚ÇΩ)" if price else name
            callback_data = f"service_{service_id}"
            keyboard.append([InlineKeyboardButton(label, callback_data=callback_data)])

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(text=message_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text=message_text, reply_markup=reply_markup)


async def my_appointments_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π."""

    context.user_data['awaiting_phone_for_view'] = True

    keyboard = [[KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    message = "üìû –ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
    if update.callback_query:
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message, reply_markup=reply_markup)


# --- 4. –õ–æ–≥–∏–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ú–∞—Å—Ç–µ—Ä, –ö–∞–ª–µ–Ω–¥–∞—Ä—å, –°–ª–æ—Ç—ã, –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è) ---

async def show_employees_for_service(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø.
    –ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–µ.
    """
    query = update.callback_query
    user_id = update.effective_user.id
    service_id = context.user_data.get('selected_service_id')

    logger.info(f"User {user_id}: Requesting employees for Service ID {service_id}")

    if not service_id:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –£—Å–ª—É–≥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
        return

    message_text = "üßë‚Äçüîß –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤..."
    await query.edit_message_text(text=message_text)

    params = {
        'organization_id': ORGANIZATION_ID,
        'service_id': service_id
    }

    try:
        response = make_api_request('GET', EMPLOYEES_URL, params=params)

        if response is None or not response.ok:
            logger.error(
                f"User {user_id}: API request for employees failed (Status {response.status_code if response else 'None'}).")
            await query.edit_message_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏.")
            return

        employees = response.json()

    except requests.exceptions.RequestException as e:
        logger.error(f"User {user_id}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–∞—Å—Ç–µ—Ä–æ–≤ –∫ API: {e}")
        await query.edit_message_text(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤.")
        return

    if not employees:
        final_message = "üòî –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤, –æ–∫–∞–∑—ã–≤–∞—é—â–∏—Ö —ç—Ç—É —É—Å–ª—É–≥—É."
        await query.edit_message_text(final_message)
        return

    keyboard = []
    message_text = "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:"

    for employee in employees:
        employee_id = employee.get('id')
        employee_name = employee.get('name')
        if employee_id and employee_name:
            # employee_ID
            callback_data = f"employee_{employee_id}"
            keyboard.append([InlineKeyboardButton(employee_name, callback_data=callback_data)])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=message_text, reply_markup=reply_markup)


def create_calendar(year: int, month: int, service_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline Keyboard —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º."""

    logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {calendar.month_name[month]} {year}")

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (CALEND_NAV_NEXT/PREV_Year_Month_ServiceID)
    header = [
        [
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f'CALEND_PREV_{year}_{month}_{service_id}'),
            InlineKeyboardButton(f"{calendar.month_name[month]} {year}", callback_data='IGNORE'),
            InlineKeyboardButton("‚û°Ô∏è", callback_data=f'CALEND_NEXT_{year}_{month}_{service_id}'),
        ]
    ]
    week_days = [InlineKeyboardButton(day, callback_data='IGNORE') for day in
                 ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]]
    keyboard = [week_days]

    today = date.today()
    month_calendar = calendar.Calendar(0).monthdatescalendar(year, month)

    for week in month_calendar:
        row = []
        for day in week:
            if day.month != month:
                row.append(InlineKeyboardButton(" ", callback_data='IGNORE'))
            elif day < today:
                row.append(InlineKeyboardButton("‚ùå", callback_data='IGNORE'))
            else:
                # Callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã: CALEND_DAY_YYYY-MM-DD
                callback_data = f'CALEND_DAY_{day.strftime("%Y-%m-%d")}'
                row.append(InlineKeyboardButton(str(day.day), callback_data=callback_data))
        keyboard.append(row)

    return InlineKeyboardMarkup(header + keyboard)


async def show_calendar_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    now = date.today()
    current_service_id = context.user_data.get('selected_service_id')

    if not current_service_id:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ —Å–µ—Ä–≤–∏—Å –Ω–µ –≤—ã–±—Ä–∞–Ω
        # (–û–±—ã—á–Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç–æ–∫–µ)
        if update.callback_query:
            await update.callback_query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É.")
        else:
            await update.effective_message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É.")
        return

    current_year = context.user_data.get('calendar_year', now.year)
    current_month = context.user_data.get('calendar_month', now.month)

    context.user_data['calendar_year'] = current_year
    context.user_data['calendar_month'] = current_month

    reply_markup = create_calendar(current_year, current_month, current_service_id)
    message_text = "üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:"

    query = update.callback_query

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text, –ø–µ—Ä–µ–¥–∞–≤–∞—è reply_markup
        await query.edit_message_text(text=message_text, reply_markup=reply_markup)
    except Exception as e:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ),
        # –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        logger.error(f"Failed to edit message in show_calendar_command: {e}")
        await update.effective_message.reply_text(text=message_text, reply_markup=reply_markup)


async def show_available_slots(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–ë–ù–û–í–õ–ï–ù–û.
    –ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã, —Ç–µ–ø–µ—Ä—å —Å —É—á–µ—Ç–æ–º employee_id.
    """
    query = update.callback_query
    user_id = update.effective_user.id
    service_id = context.user_data.get('selected_service_id')
    selected_date = context.user_data.get('selected_date')
    employee_id = context.user_data.get('selected_employee_id')  # <-- –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–û–õ–ï

    if not all([service_id, selected_date, employee_id]):
        logger.error(f"User {user_id}: Missing context data: {context.user_data}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É, –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ –¥–∞—Ç—É.")
        return

    logger.info(f"User {user_id}: Requesting slots for Master ID {employee_id} on Date {selected_date}")

    message_text = f"üóìÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ **{selected_date}** (–ú–∞—Å—Ç–µ—Ä ID: {employee_id}).\n–ó–∞–≥—Ä—É–∂–∞—é —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã..."
    await query.edit_message_text(text=message_text, parse_mode='Markdown')

    params = {
        'org_id': ORGANIZATION_ID,
        'service_id': service_id,
        'date': selected_date,
        'employee_id': employee_id  # <-- –ü–ï–†–ï–î–ê–ß–ê ID –ú–ê–°–¢–ï–†–ê –î–õ–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–ò
    }

    try:
        response = make_api_request('GET', SLOTS_URL, params=params)

        if response is None:
            await query.edit_message_text("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        response.raise_for_status()
        slot_data = response.json()

    except requests.exceptions.RequestException as e:
        logger.error(f"User {user_id}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ª–æ—Ç–æ–≤ –∫ API: {e}")
        await query.edit_message_text(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ —É—Å–ª—É–≥—É.")
        return

    available_slots = slot_data
    filtered_slots = []

    for slot_detail in available_slots:
        if isinstance(slot_detail, dict) and 'time' in slot_detail:
            try:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ 'time' - —ç—Ç–æ ISO-—Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –¥–∞—Ç–æ–π
                dt_object = datetime.datetime.fromisoformat(slot_detail['time'].replace('Z', '+00:00'))
                time_str = dt_object.strftime('%H:%M')
                filtered_slots.append(time_str)
            except (ValueError, TypeError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–ª–æ—Ç–∞: {slot_detail}. –û—à–∏–±–∫–∞: {e}")
                continue

    if not filtered_slots:
        final_message = (
            f"üòî –ù–∞ –¥–∞—Ç—É **{selected_date}** –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É."
        )
        await query.edit_message_text(final_message, parse_mode='Markdown')
        return

    keyboard = []
    row = []

    for slot in filtered_slots:
        callback_data = f"SLOT_{slot}"
        row.append(InlineKeyboardButton(slot, callback_data=callback_data))
        if len(row) == 3:
            keyboard.append(row)
            row = []

    if row:
        keyboard.append(row)

    final_message = "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏:"
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=final_message, reply_markup=reply_markup, parse_mode='Markdown')


async def finalize_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–ë–ù–û–í–õ–ï–ù–û.
    –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏, –≤–∫–ª—é—á–∞—è employee_id.
    """
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞—à—É –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...",
        reply_markup=telegram.ReplyKeyboardRemove()
    )
    user_id = update.effective_user.id
    client_name = context.user_data.get('client_name')
    client_phone_number = context.user_data.get('client_phone_number')
    service_id = context.user_data.get('selected_service_id')
    employee_id = context.user_data.get('selected_employee_id')  # <-- –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–û–õ–ï
    selected_date = context.user_data.get('selected_date')
    selected_slot = context.user_data.get('selected_slot')

    start_time_str = f"{selected_date}T{selected_slot}:00"

    if not all([client_name, client_phone_number, service_id, employee_id, start_time_str]):
        logger.error(f"User {user_id}: Finalization failed due to missing data: {context.user_data}")
        await update.message.reply_text("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å —Å–Ω–∞—á–∞–ª–∞ (/start).")
        context.user_data.clear()
        return

    payload = {
        "organization": ORGANIZATION_ID,
        "service": int(service_id),
        "employee": int(employee_id),  # <-- –î–û–ë–ê–í–õ–ï–ù–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–û–õ–ï
        "client_name": client_name,
        "client_phone_number": client_phone_number,
        "start_time": start_time_str,
    }

    logger.debug(f"User {user_id}: Payload for POST: {payload}")

    try:
        response = make_api_request('POST', APPOINTMENTS_URL, json=payload)

        if response is None:
            await update.message.reply_text("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return

        response_data = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É 400 –∏ –≤—ã–≤–æ–¥ –¥–µ—Ç–∞–ª–µ–π
        if response.status_code == 400:
            error_detail = response_data.get('time_slot') or response_data.get('non_field_errors') or response_data.get(
                'employee') or response_data
            logger.error(f"User {user_id}: HTTP 400 Error on finalization: {error_detail}")
            error_message = (
                "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.**\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –æ—Ç–∫–∞–∑–æ–º.\n\n"
                f"**–î–µ—Ç–∞–ª–∏:** {error_detail}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å —Å–Ω–∞—á–∞–ª–∞ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞."
            )
            await update.message.reply_text(error_message, parse_mode='Markdown')
            return

        response.raise_for_status()

        logger.info(f"User {user_id}: ‚úÖ Appointment successfully created. Response: {response_data}")

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
        employee_name = response_data.get('employee_name', f'–ú–∞—Å—Ç–µ—Ä ID: {employee_id}')

        context.user_data.clear()

        success_message = (
            f"‚úÖ **–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
            f"**–£—Å–ª—É–≥–∞:** {response_data.get('service_name', service_id)}\n"
            f"**–ú–∞—Å—Ç–µ—Ä:** {employee_name}\n"
            f"**–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** {selected_date} –≤ {selected_slot}\n"
            f"**–ö–ª–∏–µ–Ω—Ç:** {client_name} ({client_phone_number})\n\n"
            "–ú—ã –±—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å!"
        )
        await update.message.reply_text(success_message, parse_mode='Markdown')

    except requests.exceptions.RequestException as e:
        logger.error(f"User {user_id}: RequestException during finalization API call: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# --- 5. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ ---

def clean_phone_number(phone: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –∏–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Å–µ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –∑–Ω–∞–∫–∞ '+' (–µ—Å–ª–∏ –æ–Ω –≤ –Ω–∞—á–∞–ª–µ)."""
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    cleaned = re.sub(r'\D', '', phone)
    # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–ª—Å—è —Å –ø–ª—é—Å–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if phone.startswith('+'):
        return '+' + cleaned
    return cleaned


async def request_client_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞."""
    context.user_data['awaiting_name'] = True
    await update.callback_query.edit_message_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏:"
    )


async def request_client_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞."""
    context.user_data['awaiting_phone'] = True
    context.user_data.pop('awaiting_name', None)

    keyboard = [[KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(
        "üìû –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–æ–∂–Ω–æ –∫–Ω–æ–ø–∫–æ–π '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º'):",
        reply_markup=reply_markup
    )


async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (–∏–º—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)"""
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if context.user_data.get('awaiting_name'):
        # –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
        context.user_data['client_name'] = text
        logger.info(f"User {user_id}: Name stored as '{text}'. Requesting phone.")
        await request_client_phone(update, context)

    elif context.user_data.get('awaiting_phone_for_view'):
        # –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π
        phone = clean_phone_number(text)
        context.user_data['awaiting_phone_for_view'] = False
        logger.info(f"User {user_id}: Phone stored as '{phone}' (contact view). Fetching appointments.")
        await fetch_and_display_appointments(update, context, phone)

    else:
        await update.message.reply_text("–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å. –ù–∞—á–Ω–∏—Ç–µ —Å /start.")


async def handle_contact_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É Telegram."""
    user_id = update.effective_user.id
    contact = update.message.contact
    phone = clean_phone_number(contact.phone_number)

    if context.user_data.get('awaiting_phone'):
        # –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
        context.user_data['client_phone_number'] = phone
        logger.info(f"User {user_id}: Phone stored as '{phone}' (contact for booking). Finalizing.")
        context.user_data.pop('awaiting_phone', None)
        await finalize_appointment(update, context)

    elif context.user_data.get('awaiting_phone_for_view'):
        # –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π
        context.user_data['awaiting_phone_for_view'] = False
        logger.info(f"User {user_id}: Phone stored as '{phone}' (contact view). Fetching appointments.")
        await fetch_and_display_appointments(update, context, phone)

    else:
        await update.message.reply_text("–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å. –ù–∞—á–Ω–∏—Ç–µ —Å /start.")


# --- 6. –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ ---

async def fetch_and_display_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE, phone_number: str) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±—É–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö."""
    # (–ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–π)
    user_id = update.effective_user.id
    logger.info(f"User {user_id}: Fetching appointments for phone number: {phone_number}")

    response = make_api_request('GET', APPOINTMENTS_URL, params={'phone_number': phone_number})
    if response is None:
        await update.message.reply_text("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    try:
        response.raise_for_status()
        appointments = response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"User {user_id}: RequestException during appointments fetch: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not appointments:
        await update.message.reply_text("üîé –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.")
        return

    message_parts = ["üóìÔ∏è **–í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏:**"]
    keyboard = []

    for idx, appt in enumerate(appointments):
        app_id = appt.get('id')
        start_time_str = appt.get('start_time')

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        try:
            dt_object = datetime.datetime.fromisoformat(start_time_str.replace('Z', '+00:00'))
            display_time = dt_object.strftime('%Y-%m-%d –≤ %H:%M')
        except:
            display_time = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è"

        message_parts.append(
            f"\n**{idx + 1}.** **{appt.get('service_name', '–£—Å–ª—É–≥–∞')}**\n"
            f"   –ú–∞—Å—Ç–µ—Ä: {appt.get('employee_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"   –í—Ä–µ–º—è: {display_time}\n"
            f"   –°—Ç–∞—Ç—É—Å: {appt.get('status', 'PENDING')}"
        )
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        keyboard.append([InlineKeyboardButton(f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å {idx + 1}", callback_data=f"CANCEL_{app_id}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("\n".join(message_parts), reply_markup=reply_markup, parse_mode='Markdown')


async def cancel_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å."""
    query = update.callback_query
    app_id = query.data.split('_')[1]
    user_id = update.effective_user.id

    logger.info(f"User {user_id}: Cancelling appointment ID: {app_id}")

    try:
        # –ü–∞—Ç—á (PATCH) —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
        response = make_api_request('PATCH', f"{APPOINTMENTS_URL}{app_id}/", json={'status': 'CANCELLED'})

        if response is None:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å.")
            return

        response.raise_for_status()

        await query.edit_message_text(f"‚úÖ –ó–∞–ø–∏—Å—å ‚Ññ{app_id} **—É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞**.", parse_mode='Markdown')
        logger.info(f"User {user_id}: Appointment {app_id} cancelled.")

    except requests.exceptions.RequestException as e:
        logger.error(f"User {user_id}: Error cancelling appointment {app_id}: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# --- 7. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ---

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö inline-–∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = update.effective_user.id

    # 1. –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    if data == 'start_booking':
        await services_command(update, context)
    elif data == 'view_appointments':
        await my_appointments_command(update, context)
    elif data == 'IGNORE':
        return

    # 2. –í—ã–±–æ—Ä –£—Å–ª—É–≥–∏ -> –í—ã–±–æ—Ä –ú–∞—Å—Ç–µ—Ä–∞ (–ò–ó–ú–ï–ù–ï–ù–û)
    elif data.startswith('service_'):
        service_id = data.split('_')[1]
        context.user_data['selected_service_id'] = service_id
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–∞—Å—Ç–µ—Ä–∞
        await show_employees_for_service(update, context)

    # 3. –í—ã–±–æ—Ä –ú–∞—Å—Ç–µ—Ä–∞ -> –í—ã–±–æ—Ä –î–∞—Ç—ã (–ù–û–í–û–ï)
    elif data.startswith('employee_'):
        employee_id = data.split('_')[1]
        context.user_data['selected_employee_id'] = employee_id
        logger.info(f"User {user_id}: Selected employee {employee_id}. Proceeding to calendar.")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
        await show_calendar_command(update, context)  # Calendar —á–∏—Ç–∞–µ—Ç IDs –∏–∑ context.user_data

    # 4. –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –ù–∞–≤–∏–≥–∞—Ü–∏—è
    elif data.startswith('CALEND_NAV_'):
        parts = data.split('_')
        direction, current_year, current_month, service_id = parts[2], int(parts[3]), int(parts[4]), parts[5]

        target_date = datetime.date(current_year, current_month, 1)
        if direction == 'NEXT':
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            if current_month == 12:
                next_date = datetime.date(current_year + 1, 1, 1)
            else:
                next_date = datetime.date(current_year, current_month + 1, 1)
        elif direction == 'PREV':
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
            if current_month == 1:
                next_date = datetime.date(current_year - 1, 12, 1)
            else:
                next_date = datetime.date(current_year, current_month - 1, 1)

        context.user_data['calendar_year'] = next_date.year
        context.user_data['calendar_month'] = next_date.month

        reply_markup = create_calendar(next_date.year, next_date.month, service_id)
        await query.edit_message_text("üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=reply_markup)


    # 5. –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –í—ã–±–æ—Ä –¥–Ω—è -> –°–ª–æ—Ç—ã
    elif data.startswith('CALEND_DAY_'):
        selected_date_str = data.split('_')[2]  # YYYY-MM-DD
        context.user_data['selected_date'] = selected_date_str
        await show_available_slots(update, context)

    # 6. –í—ã–±–æ—Ä –°–ª–æ—Ç–∞ -> –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
    elif data.startswith('SLOT_'):
        selected_slot = data.split('_')[1]  # HH:MM
        context.user_data['selected_slot'] = selected_slot
        await request_client_name(update, context)

    # 7. –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
    elif data.startswith('CANCEL_'):
        await cancel_appointment(update, context)


# --- 8. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""

    # –®–ê–ì 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –ü–û–õ–£–ß–ï–ù–ò–ï –¢–û–ö–ï–ù–û–í
    if not obtain_initial_tokens():
        logger.fatal("üö® –ë–æ—Ç –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏ –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")
        return

    # –®–ê–ì 2: –ó–ê–ü–£–°–ö BOT APPLICATION
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    logger.info("–ë–æ—Ç Application —Å–æ–∑–¥–∞–Ω.")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("services", services_command))
    application.add_handler(CommandHandler("my_appointments", my_appointments_command))

    application.add_handler(CallbackQueryHandler(button_handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ (–∏–º—è)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    application.add_handler(MessageHandler(filters.CONTACT, handle_contact_input))

    # –ó–∞–ø—É—Å–∫
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()